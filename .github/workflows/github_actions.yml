name: Totesys Test and Deploy

run-name: ${{ github.actor }} has triggered testing on push üöÄ

on:
  push:

jobs:

  # 1Ô∏è‚É£ INGESTION TESTS
  ingestion-tests:
    runs-on: ubuntu-latest
    environment: dev
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Setup mock_totesys database
        run: |
          psql -f data/seed_mock_db.sql -p 5432 -h localhost -U postgres
        env:
          PGPASSWORD: postgres

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run ingestion tests
        run: make run-ingest-tests
        env:
          DBUSER: postgres
          DBNAME: mock_totesys
          DBPASSWORD: postgres
          HOST: localhost
          PORT: 5432

  # 2Ô∏è‚É£ LOAD TESTS
  load-tests:
    runs-on: ubuntu-latest
    environment: dev
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Setup mock_warehouse database
        run: |
          psql -f data/seed_mock_db.sql -p 5432 -h localhost -U postgres
        env:
          PGPASSWORD: postgres

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Run load tests
        run: make run-load-tests
        env:
          DBUSER: postgres
          DBNAME: mock_warehouse
          DBPASSWORD: postgres
          HOST: localhost
          PORT: 5432

  # 3Ô∏è‚É£ TERRAFORM DEPLOYMENT
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: dev
    needs:
      - ingestion-tests
      - load-tests
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Prepare lambda directories
        run: |
          mkdir -p lambda/ingestion/src/ingestion
          mkdir -p lambda/transform/src/transform
          mkdir -p lambda/load/src/load

      - name: Install dependencies
        run: |
          pip install -r src/ingestion/ingestion_requirements.txt -t lambda/ingestion/
          pip install -r src/transform/transform_requirements.txt -t lambda/transform/
          pip install -r src/load/load_requirements.txt -t lambda/load/

      - name: Copy source + utils
        run: |
          cp -r src/ingestion/* lambda/ingestion/src/ingestion/
          cp -r src/transform/* lambda/transform/src/transform/
          cp -r src/load/* lambda/load/src/load/
          cp -r utils lambda/ingestion/
          cp -r utils lambda/transform/
          cp -r utils lambda/load/

      - name: Zip up lambda packages
        run: |
          cd lambda/ingestion && zip -r ingestion.zip . && cd ../..
          cd lambda/transform && zip -r transform-lambda.zip . && cd ../..
          cd lambda/load && zip -r load-lambda.zip . && cd ../..

      - name: Upload Lambda packages to S3
        run: |
          aws s3 cp ./lambda/ingestion/ingestion.zip "s3://$(terraform output -raw code_bucket_name)"
          aws s3 cp ./lambda/transform/transform-lambda.zip "s3://$(terraform output -raw code_bucket_name)"
          aws s3 cp ./lambda/load/load-lambda.zip "s3://$(terraform output -raw code_bucket_name)"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -input=false

  

